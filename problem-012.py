"""
Highly divisible triangular number

Problem 12
The sequence of triangle numbers is generated by adding the natural numbers.
So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.
The first ten terms would be: 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?
"""
from package1 import factoring
from package1 import combinations
import math
from functools import reduce


def generateTriangleNumber():
    num = 0
    while (True):
        num += 1
        triangleNumber = 0
        for x in range(0, num + 1):
            triangleNumber += x
        yield triangleNumber


def findAllFactors(primeFactors):
    factor1 = primeFactors[0]
    otherFactors = primeFactors[1:]
    if len(otherFactors) == 0:
        return [1, factor1]
    factors = findAllFactors(otherFactors)
    return factors + list(map(lambda x: factor1 * x, factors))


def isTriangle(num):
    triangleGenerator = generateTriangleNumber()
    triangle = next(triangleGenerator)
    while (num > triangle):
        triangle = next(triangleGenerator)
    return num == triangle


def multiply(arr):
    foo = reduce(lambda x, y: x * y, arr)
    return foo


def go(num):
    numberOfUniquePrimeFactors = math.ceil(math.log(num) / math.log(2))
    primeGenerator = factoring.generatePrimes()
    primeFactors = []
    num = 0
    for x in range(0, numberOfUniquePrimeFactors):
        primeFactors.append(next(primeGenerator))
    while (True):
        primeFactors.append(next(primeGenerator))
        primeCombos = combinations.uniqueCombinations(numberOfUniquePrimeFactors, primeFactors)
        allNums = list(map(lambda x: multiply(x), primeCombos))
        for num in allNums:
            if (isTriangle(num)):
                return num
        primeFactors = primeFactors.append(next(primeGenerator))


answer = go(6)
print(answer)
